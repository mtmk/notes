/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package prj01;

import io.aeron.Aeron;
import io.aeron.Publication;
import io.aeron.Subscription;
import io.aeron.driver.MediaDriver;
import io.aeron.logbuffer.FragmentHandler;
import org.agrona.concurrent.IdleStrategy;
import org.agrona.concurrent.SleepingIdleStrategy;
import org.agrona.concurrent.UnsafeBuffer;

import java.nio.ByteBuffer;

public class App {
    // https://aeroncookbook.com/aeron/basic-sample/
    public static void main(String[] args) {
        System.out.println("Java v" + System.getProperty("java.version"));

        final String channel = "aeron:ipc";
        final String message = "hello world!";

        final IdleStrategy idle = new SleepingIdleStrategy();
        final UnsafeBuffer unsafeBuffer = new UnsafeBuffer(ByteBuffer.allocate(256));

        try (MediaDriver driver = MediaDriver.launch();
             Aeron aeron = Aeron.connect();
             Subscription sub = aeron.addSubscription(channel, 10);
             Publication pub = aeron.addPublication(channel, 10)) {

            while (!pub.isConnected()) {
                idle.idle();
            }

            unsafeBuffer.putStringAscii(0, message);
            System.out.println("sending: " + message);

            while (pub.offer(unsafeBuffer) < 0) {
                idle.idle();
            }

            FragmentHandler handler = ((buffer, offset, length, header) -> {
                System.out.println("received: " + buffer.getStringAscii(offset));
            });

            while (sub.poll(handler, 1) <= 0) {
                idle.idle();
            }

        }
    }
}
